 Project Setup and Dependencies:

Create React App (CRA): We used CRA to bootstrap the project, providing a pre-configured development environment.
package.json: This file lists our project's dependencies:
react, react-dom: Core React libraries.
react-redux, @reduxjs/toolkit: For managing application state.
react-router-dom: For client-side routing.
axios: For making HTTP requests (e.g., fetching data from an API).
@types/react-dom: For typescript type definitions.
index.tsx: This is the entry point of the application. It renders the App component within a BrowserRouter (for routing) and a Provider (for Redux).
App.tsx: This is the root component. It renders the UserList component.
2. Redux State Management:

store/store.ts: This file configures the Redux store using @reduxjs/toolkit.
store/userSlice.ts: This file defines the Redux slice for managing user data:
initialState: Sets the initial state (e.g., users, loading, error).
reducers: Defines synchronous state updates.
extraReducers: Handles asynchronous actions (e.g., fetchUsers).
fetchUsers: An asynchronous thunk that fetches user data from an API using axios.
useSelector and useDispatch: These hooks from react-redux are used to access and modify the Redux store's state.
3. React Router Navigation:

react-router-dom: This library provides client-side routing functionality.
<BrowserRouter>: This component sets up the routing context.
<Link>: This component creates navigation links.
4. Components:

UserList.tsx:
Fetches user data from the Redux store using useSelector.
Dispatches the fetchUsers action using useDispatch.
Renders a list of UserCard components.
UserCard.tsx:
Displays individual user information.
Includes links to view user details and edit users.
Component Structure: The application is organized into reusable components, promoting modularity and maintainability.
5. Styling:

CSS: We used plain CSS to style the components.
index.css: This file contains global styles that affect the entire application.
UserList.css and UserCard.css: These files contain component-specific styles.
Class Names: We used class names to apply styles to elements.
Hover Effects: We added hover effects to the user cards and links.
Centering Content: We used text-align: center; and margin: 0 auto; to center content.
6. Deployment:

Render: We deployed the application to Render, a cloud platform for hosting web applications.
npm run build: This command creates a production build of the application.
Static Site: We deployed the application as a static site.
Continuous Deployment: Render automatically deploys the application whenever we push changes to the selected branch
